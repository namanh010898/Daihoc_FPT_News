#pragma checksum "C:\Users\naman\Documents\GitHub\Daihoc_FPT_News\Test2\Test2\Views\Menu\AdminList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d9c1c0143b58785e8eb208b264b1b3b78002956a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Menu_AdminList), @"mvc.1.0.view", @"/Views/Menu/AdminList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\naman\Documents\GitHub\Daihoc_FPT_News\Test2\Test2\Views\_ViewImports.cshtml"
using Daihoc_FPT_News;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\naman\Documents\GitHub\Daihoc_FPT_News\Test2\Test2\Views\_ViewImports.cshtml"
using Daihoc_FPT_News.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d9c1c0143b58785e8eb208b264b1b3b78002956a", @"/Views/Menu/AdminList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8d0920572bf03d2705c1affc844da3453f7db91f", @"/Views/_ViewImports.cshtml")]
    public class Views_Menu_AdminList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "POST", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onsubmit", new global::Microsoft.AspNetCore.Html.HtmlString("updateItem(updatingItemID); return false;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 3 "C:\Users\naman\Documents\GitHub\Daihoc_FPT_News\Test2\Test2\Views\Menu\AdminList.cshtml"
  
    ViewData["Title"] = "Menu";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""page-header card"">
    <div class=""col"">
        <div class=""page-header-title"">
            <i class=""fa fa-server""></i>
            <div class=""d-inline"">
                <h3 class=""tableTitle"">Menu</h3>
            </div>
        </div>

        <a href=""#"" id=""btnAddItem"" onclick=""editItem(0);"" class=""btn btn-brand btn-elevate btn-icon-sm"">
            <i class=""fa fa-plus""></i>
            <span class='hideOnMobile'>Thêm danh mục</span>
        </a>
    </div>
</div>

<div class=""pcoded-inner-content"">
    <div class=""main-body"">
        <div class=""page-wrapper"">

            <!-- Page-body start -->
            <div class=""page-body"">
                <div class=""card"">
                    <div class=""card-block novaticContainer"">
                        <div class=""dt-responsive table-responsive"">

                            <table id=""tableData"" class=""table table-hover"">
                                <thead>
                                    <!--<tr>
");
            WriteLiteral(@"                                                                <th>Index</th>
                                                                <th>Apply Type ID</th>
                                                                <th>Active</th>
                                                                <th>Apply Type Name</th>
                                                                <th>Description</th>
                                                                <th>Created Time</th>
                                                                <th>Detail</th>
                                                                <th>Delete</th>
                                                            </tr>-->
                                <th>Index</th>
                                <th>ID</th>
                                <th>Parent ID</th>
                                <th>Độ ưu tiên</th>
                                <th>Vị trí hiển thị</th>
                        ");
            WriteLiteral("        <th>Tên menu</th>\r\n");
            WriteLiteral("                                <th>Mô tả</th>\r\n                                <th>URL</th>\r\n");
            WriteLiteral(@"                                <th>Ngày tạo</th>

                                <th>Chi tiết</th>
                                <th>Xóa</th>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                <th>Index</th>
                                <th>ID</th>
                                <th>Parent ID</th>
                                <th>Độ ưu tiên</th>
                                <th>Vị trí hiển thị</th>
                                <th>Tên menu</th>
");
            WriteLiteral("                                <th>Mô tả</th>\r\n                                <th>URL</th>\r\n");
            WriteLiteral(@"                                <th>Ngày tạo</th>

                                <th> </th>
                                <th> </th>
                                </tfoot>
                            </table>

                            <div class=""modal fade"" id=""modal-id"">
                                <div class=""modal-dialog modal-lg"">
                                    <div class=""modal-content"">
                                        <div class=""modal-header bg-gradient-info"">
                                            <button type=""button"" class=""close"" data-dismiss=""modal""
                                                    aria-hidden=""true"">
                                                &times;
                                            </button>
                                            <h4 class=""modal-title""><i class=""fa fa-edit""></i> Chi tiết</h4>
                                        </div>
                                        <div class=""modal-body"">

");
            WriteLiteral("\n                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d9c1c0143b58785e8eb208b264b1b3b78002956a9113", async() => {
                WriteLiteral(@"

                                                <!-- <div class=""form-group"">
                                                    <label for="""">Apply type ID</label>
                                                    <input type=""text"" class=""form-control""
                                                        id=""menuId"" required readonly
                                                        placeholder="""">
                                                </div>


                                                <div class='form-group'>
                                                    <label for=''>Apply type name</label>
                                                    <input type='text' class='form-control'
                                                        id='menuName' required
                                                        placeholder=''>
                                                </div>


                                                <div class='form-gro");
                WriteLiteral(@"up'>
                                                    <label for=''>Description</label>
                                                    <input type='text' class='form-control'
                                                        id='menuDescription'
                                                        placeholder=''>
                                                </div>


                                                <div class='form-group'>
                                                    <label for=''>CreatedTime</label>
                                                    <input type='text'
                                                        class='form-control datetimepicker'
                                                        id='menuCreatedTime'
                                                        placeholder=''>
                                                </div>


                                                <div class='form-group' style="""">
       ");
                WriteLiteral(@"                                             <label for=''>Active</label>
                                                    <input type='text' class='form-control'
                                                        id='menuActive' readonly
                                                        placeholder=''>
                                                </div>
                                                -->
                                                <div class=""form-group"">
                                                    <label");
                BeginWriteAttribute("for", " for=\"", 6979, "\"", 6985, 0);
                EndWriteAttribute();
                WriteLiteral(">ID</label><span class=\'required\'>*</span>\r\n                                                    <input type=\"number\" class=\"form-control input-id\" value=\"0\"\r\n                                                           id=\"menuId\" required readonly");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 7232, "\"", 7306, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div> <div class=\"form-group\">\r\n                                                    <label");
                BeginWriteAttribute("for", " for=\"", 7449, "\"", 7455, 0);
                EndWriteAttribute();
                WriteLiteral(">Parent ID</label>\r\n                                                    <input type=\"number\" class=\"form-control input-parentID\" value=\"0\"\r\n                                                           id=\"menuParentID\"");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 7672, "\"", 7746, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div> <div class=\"form-group\" style=\"display:none \">\r\n                                                    <label");
                BeginWriteAttribute("for", " for=\"", 7911, "\"", 7917, 0);
                EndWriteAttribute();
                WriteLiteral(">Active</label><span class=\'required\'>*</span>\r\n                                                    <input type=\"number\" class=\"form-control input-active\" value=\"0\"\r\n                                                           id=\"menuActive\" required");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 8167, "\"", 8241, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div> <div class=\"form-group\">\r\n                                                    <label");
                BeginWriteAttribute("for", " for=\"", 8384, "\"", 8390, 0);
                EndWriteAttribute();
                WriteLiteral(@">Độ ưu tiên</label><span class='required'>*</span>
                                                    <input type=""number"" class=""form-control input-priority"" value=""0""
                                                           id=""menuPriority"" required");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 8648, "\"", 8722, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div>\r\n");
                WriteLiteral("                                                <div class=\'form-group row selectContainer\'>\r\n                                                    <label");
                BeginWriteAttribute("class", " class=\'", 9484, "\'", 9492, 0);
                EndWriteAttribute();
                WriteLiteral(@">Vị trí hiển thị</label><span class='required'>*</span>
                                                    <div class='col-sm-12'>
                                                        <select name='select' required id='menuGroupID'
                                                                class='form-control fill dataSelect  input-groupID'
                                                                style=' border: 1px solid #e9ecef; '>
                                                        </select>
                                                    </div>
                                                </div>
                                                <script>
                                                    var groupIDData = JSON.parse('[{""id"":1,""name"":""Main Menu""},{""id"":2,""name"":""Footer Menu""}]');
                                                    groupIDData.forEach(function (item, index) {
                                                        var data = {
          ");
                WriteLiteral(@"                                                  id: item.id,
                                                            text: item.name
                                                        };
                                                        var newOption = new Option(data.text, data.id, false, false);
                                                        $('#menuGroupID').append(newOption).trigger('change');
                                                    });
                                                </script>

                                                <div class=""form-group"">
                                                    <label");
                BeginWriteAttribute("for", " for=\"", 11199, "\"", 11205, 0);
                EndWriteAttribute();
                WriteLiteral(">Tên menu</label><span class=\'required\'>*</span>\r\n                                                    <input type=\"text\" class=\"form-control  input-name\"\r\n                                                           id=\"menuName\" required");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 11442, "\"", 11516, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div>   <div class=\"form-group\">\r\n                                                    <label");
                BeginWriteAttribute("for", " for=\"", 11661, "\"", 11667, 0);
                EndWriteAttribute();
                WriteLiteral(">Tên tiếng Anh</label><span class=\'required\'>*</span>\r\n                                                    <input type=\"text\" class=\"form-control  input-name2\"\r\n                                                           id=\"menuName2\" required");
                BeginWriteAttribute("placeholder", "\r\n                                                           placeholder=\"", 11911, "\"", 11985, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                    <label");
                BeginWriteAttribute("for", " for=\"", 12177, "\"", 12183, 0);
                EndWriteAttribute();
                WriteLiteral(@">Mô tả</label>
                                                    <textarea class=""form-control  input-description "" rows=""2"" id=""menuDescription""></textarea>
                                                </div>
                                                <div class=""form-group"">
                                                    <label");
                BeginWriteAttribute("for", " for=\"", 12534, "\"", 12540, 0);
                EndWriteAttribute();
                WriteLiteral(@">URL</label><span class='required'>*</span>
                                                    <textarea class=""form-control  input-url "" rows=""2"" id=""menuUrl"" required></textarea>
                                                </div>
                                                <div class=""form-group"">
                                                    <label");
                BeginWriteAttribute("for", " for=\"", 12913, "\"", 12919, 0);
                EndWriteAttribute();
                WriteLiteral(@">URL2</label><span class='required'>*</span>
                                                    <textarea class=""form-control  input-url2 "" rows=""2"" id=""menuUrl2"" required></textarea>
                                                </div><div class='form-group'>
                                                    <label");
                BeginWriteAttribute("for", " for=\'", 13245, "\'", 13251, 0);
                EndWriteAttribute();
                WriteLiteral(@">Ngày tạo </label><span class='required'>*</span>
                                                    <div class='input-group date datetimepicker  input-createdTime' id='menuCreatedTimeDiv'>
                                                        <input type='text' id=""menuCreatedTime"" required class=""form-control"" required />
                                                        <span class=""input-group-addon"">
                                                            <span class=""glyphicon glyphicon-calendar""></span>
                                                        </span>
                                                    </div>
                                                </div>




                                                <input style=""display:none"" id=""hiddenSubmit"" type=""submit""
                                                       class=""btn btn-default"" value=""Save changes"">
                                            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"


                                        </div>
                                        <div class=""modal-footer"">
                                            <button type=""button"" class=""btn btn-default""
                                                    data-dismiss=""modal"">
                                                Đóng
                                            </button>
                                            <button type=""button"" class=""btn btn-primary"" id=""btnUpdateItem""
                                                    onclick=""document.getElementById('hiddenSubmit').click();"">
                                                Lưu thông tin
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </di");
            WriteLiteral(@"v>
    </div>
</div>


<script>
        var hiddenItem = [""active""];
        var dataSource = [];
        var updatingItemID = 0;
        var tableUpdating = 0;
        var table;
        var a = window.location.href
        $(document).ready(function () {
            // Load data
            loadData();
            // includeLibrary();

            // Datetime picker
            $('.datetimepicker').datetimepicker({
                format: 'DD-MM-YYYY HH:mm:ss'
            });

            $('.dataSelect').select2();

            $("".datetimepicker"").on('dp.change', function (e) {
                // console.log(this.value);
                this.value = moment(this.value).format(""DD-MM-YYYY HH:mm:ss"");
                // console.log(this.value);
            })
        });


        function loadData() {
            $.ajax({
                url: window.location.href + ""/menu/api/list"",
                type: ""GET"",
                contentType: ""application/json"",
           ");
            WriteLiteral(@"     success: function (responseData) {
                    // debugger;
                    var data = responseData.data;
                    dataSource = data;




                    data.forEach(function (item, index) {
                        // console.log(item, index);
                        var rowContent = """";
                        rowContent += ""<td style='text-align: center;'>"" + (index + 1) + ""</td>"";
                        for (var key in item) {
                            if (item.hasOwnProperty(key)) {
                                // console.log(key + "" -> "" + item[key]);
                                if (!hiddenItem.includes(key)) {
                                    if (key == ""groupID"") {
                                        if (item[key] == ""1"") {
                                            rowContent += ""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'>Main Menu</td>"";
                                        }
               ");
            WriteLiteral(@"                         else {
                                            rowContent += ""<td class='row"" + item.id + ""-column column-"" + key + ""' property='"" + key + ""'>Footer Menu</td>"";
                                        }
                                    }
                                    else {
                                        rowContent += ""<td class='row""+item.id+""-column column-""+key+""' property='""+key+""'>"" + item[key] + ""</td>"";
                                    }
                                }
                            }
                        }
                        rowContent += ""<td style='text-align: center;'><a onclick='editItem("" + item.id + "")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>"";
                        rowContent += ""<td style='text-align: center;'><a onclick='deleteItem("" + item.id + "")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>"";

                        var newRow = ""<tr id='row""+item.id+""' >"" +");
            WriteLiteral(@" rowContent + ""</tr>"";
                        $(newRow).appendTo($(""#tableData tbody""));

                        // $(""#tableData #dummyRow"").after(""<tr id='row""+item.id+""' >"" + rowContent + ""</tr>"");
                    });

                    //Init datatable
                    if (tableUpdating === 0) {
                        initTable();
                    }

                    //update data with foreign key
                    updateTable();
                },
                error: function (e) {
                    //console.log(e.message);
                    initTable();
                }
            });
        }

        function initTable(){
            table = $('#tableData').DataTable({
                aLengthMenu: [
                    [10, 25, 50, 100, 200, -1],
                    [10, 25, 50, 100, 200, 'Tất cả']
                ],
                'order': [
                    [1, 'desc']
                ]
            });



            table.on('orde");
            WriteLiteral(@"r.dt search.dt', function() {
                table.column(0, {
                    search: 'applied',
                    order: 'applied'
                }).nodes().each(function(cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

            $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function() {
                var title = $(this).text();
                $(this).html(""<input type='text' class='tableFooterFilter' placeholder=' ' />"");
            });

            table.columns().every(function() {
                var that = this;

                $('input', this.footer()).on('keyup change', function() {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });
        }

        function editItem(id) {
            updatingItemID = id;
  ");
            WriteLiteral(@"          $(""#modal-id"").modal('show');
            debugger;
            let obj = getItemByID(id);
            		$(""#menuId"").val(id > 0 ? obj.id : """");
            $(""#menuParentID"").val(id > 0 ? obj.parentId : """");

		$(""#menuActive"").val(id > 0 ? obj.active : """");
		$(""#menuPriority"").val(id > 0 ? obj.priority : """");
		$(""#menuGroupID"").val(id > 0 ? obj.groupID : """");
		$(""#menuName"").val(id > 0 ? obj.name : """");
		$(""#menuName2"").val(id > 0 ? obj.name2 : """");
		$(""#menuDescription"").val(id > 0 ? obj.description : """");
		$(""#menuUrl"").val(id > 0 ? obj.url : """");
		$(""#menuUrl2"").val(id > 0 ? obj.url2 : """");
		$(""#menuCreatedTime"").val(id > 0 ? obj.createdTime : """");
        $('#menuGroupID').trigger('change');

            // $(""#menuId"").val(id > 0 ? obj.id : """");
            // $(""#menuName"").val(id > 0 ? obj.name : """");
            // $(""#menuDescription"").val(id > 0 ? obj.description : """");
            // $(""#menuCreatedTime"").val(id > 0 ? obj.createdTime : """");
            // $(");
            WriteLiteral(@"""#menuActive"").val(id > 0 ? obj.active : """");

            if(id==0){
                $(""#menuActive"").val(1);
                $(""#menuCreatedTime"").val(new Date());
                $(""#menuGroupID"").val();
            }
            else{
                // correcting data
                //$('#buyProvinceID').val(obj.provinceID.split("", "")).trigger('change');

            }
            formatNumber();
        }


        function updateItem(id) {
            debugger;
            var actionName = (id == 0 ? ""Create"" : ""Update"");
            let obj = getItemByID(id);
            let objName = id > 0 ? obj.name : "" "";
                var parentIdUpdate = 0;
            try {
                if ($(""#menuParentID"").val() != """") {
                    parentIdUpdate = $(""#menuParentID"").val();
                }
            } catch (e) {
                parentIdUpdate = 0;
            }

            validateInputNumber();

            // ""id"": $(""#menuId"").val(),
            // ""na");
            WriteLiteral(@"me"": $(""#menuName"").val(),
            // ""description"": $(""#menuDescription"").val(),
            // ""createdTime"": $(""#menuCreatedTime"").val(),
            // ""active"": $(""#menuActive"").val()
            var updatingObj = {
                ""id"": $(""#menuId"").val(),
                ""parentId"": parentIdUpdate,
		        ""active"": $(""#menuActive"").val(),
		        ""priority"": $(""#menuPriority"").val(),
		        ""groupID"": $(""#menuGroupID"").val(),
		        ""name"": $(""#menuName"").val(),
		        ""name2"": $(""#menuName2"").val(),
		        ""description"": $(""#menuDescription"").val(),
		        ""url"": $(""#menuUrl"").val(),
		        ""url2"": $(""#menuUrl2"").val(),
		        ""createdTime"": datetimeFormat($(""#menuCreatedTime"").val()),
            };

            // correcting data
            //updatingObj.provinceID = updatingObj.provinceID.join("", "");


            Swal.fire({
                title: 'Bạn có chắc không?',
                text: ""Thực hiện "" + actionName + "" item "" + objName,
    ");
            WriteLiteral(@"            icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#443',
                confirmButtonText: 'Đồng ý!',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.value) {
                    $(""#modal-id"").modal('hide');

                    //CALL AJAX TO UPDATE
                    if (id > 0) {
                        $.ajax({
                            url: window.location.href + ""/menu/api/update"",
                            type: ""POST"",
                            contentType: ""application/json"",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 200 && responseData.message === ""SUCCESS"") {
                                    Swal.fire(
                              ");
            WriteLiteral(@"          'Updated!',
                                        'Item ' + objName + ' has been successfully updated!',
                                        'success'
                                    );
                                    var updatedItemIndex= dataSource.findIndex(item => parseInt(item.id) === id);
                                    dataSource[updatedItemIndex] = updatingObj;
                                    updateTable(id,updatingObj,""update"");
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Could\' update item, please check your data',
                                    'error'
                                );
                            }
                        });
                    };

                    //CA");
            WriteLiteral(@"LL AJAX TO CREATE
                    if (id == 0) {
                        updatingObj.id = 1;
                        delete updatingObj[""id""]
                        updatingObj.active = 1;
                        updatingObj.createdTime = new Date();
                        console.log(updatingObj);
                        $.ajax({
                            url: window.location.href + ""/menu/api/add"",
                            type: ""POST"",
                            contentType: ""application/json"",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 201 && responseData.message === ""CREATED"") {
                                    Swal.fire(
                                        'Created!',
                                        'New item has been successfully created!',
                                  ");
            WriteLiteral(@"      'success'
                                    );
                                    updatingObj = responseData.data;
                                    dataSource.push(updatingObj);
                                    updateTable(0,updatingObj,""add"");
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Could\' create item, please check your data',
                                    'error'
                                );
                            }
                        });
                    }
                }
            })
        }

        function deleteItem(id) {
            let obj = getItemByID(id);
            Swal.fire({
                title: 'Bạn có muốn xóa không?',
                text: ""Bạn sẽ không thể phục ");
            WriteLiteral(@"hồi lại dữ liệu này sau khi xóa!"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Đồng ý!',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.value) {

                    //CALL AJAX TO DELETE
                    $.ajax({
                        url: window.location.href + ""/menu/api/delete"",
                        type: ""POST"",
                        contentType: ""application/json"",
                        data: JSON.stringify({ ""id"": id }),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 200 && responseData.message === ""SUCCESS"") {
                                Swal.fire(
                                    'Deleted!',
                                    'Item ' + obj.name + ' ");
            WriteLiteral(@"has been deleted.',
                                    'success'
                                );
                                updateTable(id,0,""delete"");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Item ' + obj.name + ' can\'t be deleted.',
                                'error'
                            );
                        }
                    });

                }
            })
        }

        function updateTable(id,obj,action) {
            if(action === ""delete""){
                table.row(""#row""+id).remove().draw();
            }

            if(action === ""add""){
                console.log(""Added:""+obj);

                //var addedItems = [obj];
                var addedItems = obj;
                var addedValues =[];


 ");
            WriteLiteral(@"               addedItems.forEach(function (item, index) {
                    // console.log(item, index);
                    var rowContent = """";
                    addedValues.push(""<td style='text-align: center;'></td>"");
                    for (var key in item) {
                        if (item.hasOwnProperty(key)) {
                            // console.log(key + "" -> "" + item[key]);
                            if (!hiddenItem.includes(key)) {
                                if (key == ""groupID"") {
                                    if (item[key] == ""1"") {
                                            addedValues.push(""<td class='row""+item.id+""-column column-""+key+""' property='""+key+""'>Main Menu</td>"");
                                        }
                                        else {
                                            addedValues.push(""<td class='row""+item.id+""-column column-""+key+""' property='""+key+""'>Footer Menu</td>"");
                                        }
     ");
            WriteLiteral(@"                               }
                                else {
                                    addedValues.push(""<td class='row""+item.id+""-column column-""+key+""' property='""+key+""'>"" + item[key] + ""</td>"");
                                }
                            }
                        }
                    }
                    addedValues.push(""<td style='text-align: center;'><a onclick='editItem("" + item.id + "")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>"");
                    addedValues.push(""<td style='text-align: center;'><a onclick='deleteItem("" + item.id + "")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>"");

                    table.row.add(addedValues).draw();
                });
                // location.reload();
            }

            if(action === ""update""){
                $("".row""+id+""-column"").each(function(){
                    var propertyName = $(this).attr(""property"");
                    console.log(");
            WriteLiteral(@"propertyName);

                    for (var key in obj) {
                        if (key === propertyName && obj.hasOwnProperty(key)) {
                            if (key == ""groupID"") {
                                if (obj[key] == ""1"") {
                                    this.innerText = ""Main Menu"";
                                }
                                else {
                                    this.innerText = ""Footer Menu"";
                                }
                            }
                            else {
                                this.innerText = obj[key];
                            }
                        }
                    }

                });
            }

            //Update columns with foreign key
            // var NO_FKFKUpdateSelector = 'tr';
            // if( !(typeof(id) === 'undefined')) {
            //     NO_FKFKUpdateSelector = '#row'+id;
            // }
            // $('#tableData tbody '+NO_FKFKUpdateSelect");
            WriteLiteral(@"or+' td[property=NO_FKID]').each(function(){
            //     // debugger;
            //     var menuID = parseInt($(this).attr('class').replace('row','').replace('-column',''));
            //     var menuObj = getItemByID(menuID);
            //     var NO_FKID = parseInt(menuObj.NO_FKID);
            //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKID);
            //     $(this).text(NO_FKObj.name);
            //     // console.log('FK updated for Staff '+menuID);
            // });


            formatNumber();
        }


        function getItemByID(id) {
            const result = dataSource.find(item => parseInt(item.id) === id);
            return result;
        }

        function camelToSentenceCase(input) {
            var text = input;
            var result = text.replace(/([A-Z])/g, "" $1"");
            var finalResult = result.charAt(0).toUpperCase() + result.slice(1);
            return finalResult;
        }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
